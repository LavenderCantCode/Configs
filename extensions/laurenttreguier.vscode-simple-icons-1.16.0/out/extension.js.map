{"version":3,"file":"extension.js","mappings":"8bAAA,eACA,QACA,SAEMA,EAAa,6BAUnB,SAAeC,EAAmBC,G,0CAKT,IAJI,OACfC,EAAaD,SACbE,EAAgB,SAAUF,SAC1BE,EAAgB,OAAQF,IAChCG,SAAQ,WAGAC,EAAOC,OAAOC,uBAAuB,wDAAyD,UAC/FC,MAAKC,GAAUA,EAASJ,EAAOK,SAASC,eAAe,iCAAmC,WAIvG,SAAeT,EAAaD,G,yCACxB,MAAMW,EAAY,CAAC,SAAU,gBAAgBC,KAAIC,GAAQA,EAAO,gBAChE,IAAIC,GAAmB,EAEvB,IAAK,MAAMC,KAAQJ,QACTK,EAAWhB,EAASe,GAAYE,GAAW,EAAD,gCAC5C,IAAIC,EAAOC,KAAKC,MAAMH,GACtB,MAAMI,EAAOjB,EAAOkB,UAAUC,iBAAiB,eAAeC,IAAI,cAAc,GAEhF,OAAIN,EAAKO,sBAAwBJ,EACtB,MAGXP,GAAmB,EACnBI,EAAKO,oBAAsBJ,EACpBF,KAAKO,UAAUR,EAAM,KAAM,SAI1C,OAAOJ,KAGX,SAAeZ,EAAgBW,EAAcb,G,yCACzC,MAAM2B,EAAqB,UAAUd,UACrC,IAAIe,EAAQxB,EAAOkB,UAAUC,iBAAiB,eAAeC,IAAYG,EAAoB,MAC7F,MAAME,EAAW7B,EAAQ8B,YAAYN,IAAYG,GAEjD,GAAKC,GAOE,IAAKA,EAAMG,MAAMjC,GAEpB,aADMM,EAAOC,OAAO2B,mBAAmB,mBAAmBnB,4CACnD,MATC,CACR,IAAIgB,EAIA,OAAO,EAHPD,EAAQC,QACF7B,EAAQ8B,YAAYG,OAAON,OAAoBO,GAS7D,MACMC,GADgB,UAARtB,EAAmB,CAACA,EAAMA,EAAO,aAAe,CAACA,IACvCD,KAAIwB,GAAKC,EAAKC,KAAK,QAAS,eAAgBF,GAAK,SACzE,IAAItB,GAAmB,EAEvB,IAAK,MAAMyB,KAAYJ,QACbnB,EAAWhB,EAASuC,GAAgBtB,GAAW,EAAD,gCAChD,MACMuB,EADiBvB,EAAQc,MAAMjC,GACA,GAErC,OAAI0C,IAAkBZ,EACX,MAGXd,GAAmB,EAEfc,IAAUC,UACJ7B,EAAQ8B,YAAYG,OAAON,EAAoBa,IAGlDvB,EAAQwB,QAAQ3C,EAAY8B,SAI3C,OAAOd,KAGX,SAAeE,EAAWhB,EAAkCa,EAAc6B,G,yCACtE,MAAM3B,EAAOf,EAAQ2C,eAAe9B,GAC9BI,QAAgB,IAAI2B,SAAgBC,GAAWC,EAAGC,SAAShC,GAAM,CAACiC,EAAKC,IAASJ,EAAQI,EAAKC,gBAC7FC,QAAmBT,EAAGzB,GAE5B,GAAIkC,EACA,aAAa,IAAIP,SAAcC,GAAWC,EAAGM,UAAUrC,EAAMoC,GAAYH,GAAOH,WA5FxF,oBAA+B7C,G,yCAE3B,OADAA,EAAQqD,cAAcC,KAAKlD,EAAOkB,UAAUiC,0BAAyB,IAAMxD,EAAmBC,YACjFD,EAAmBC,OAGpC,wB,uDCXAwD,EAAOC,QAAUC,QAAQ,W,QCAzBF,EAAOC,QAAUC,QAAQ,O,OCAzBF,EAAOC,QAAUC,QAAQ,UCCrBC,EAA2B,GCE3BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqB5B,IAAjB6B,EACH,OAAOA,EAAaN,QAGrB,IAAID,EAASG,EAAyBG,GAAY,CAGjDL,QAAS,IAOV,OAHAO,EAAoBF,GAAUG,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASI,GAGpEL,EAAOC,QClBWI,CAAoB,K","sources":[".././source/extension.ts","../external commonjs \"vscode\"","../external node-commonjs \"fs\"","../external node-commonjs \"path\"","../webpack/bootstrap","../webpack/startup"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as vscode from 'vscode';\n\nconst colorRegex = /#[0-9A-F]{6}(?![0-9A-F])/gi;\n\nexport async function activate(context: vscode.ExtensionContext) {\n    context.subscriptions.push(vscode.workspace.onDidChangeConfiguration(() => probeConfiguration(context)));\n    return await probeConfiguration(context);\n}\n\nexport async function deactivate() {\n}\n\nasync function probeConfiguration(context: vscode.ExtensionContext): Promise<void> {\n    const somethingChanged = [\n        await toggleArrows(context),\n        await changeIconColor('folder', context),\n        await changeIconColor('file', context)\n    ].indexOf(true) !== -1;\n\n    if (somethingChanged) {\n        await vscode.window.showInformationMessage('The window must be reloaded for changes to take effet', 'Reload')\n            .then(choice => choice ? vscode.commands.executeCommand('workbench.action.reloadWindow') : null);\n    }\n}\n\nasync function toggleArrows(context: vscode.ExtensionContext): Promise<boolean> {\n    const jsonFiles = ['simple', 'minimalistic'].map(name => name + '-icons.json');\n    let somethingChanged = false;\n\n    for (const file of jsonFiles) {\n        await changeFile(context, file, async content => {\n            let json = JSON.parse(content);\n            const conf = vscode.workspace.getConfiguration('simpleIcons').get('hideArrows', false);\n\n            if (json.hidesExplorerArrows === conf) {\n                return null;\n            }\n\n            somethingChanged = true;\n            json.hidesExplorerArrows = conf;\n            return JSON.stringify(json, null, 4);\n        });\n    }\n\n    return somethingChanged;\n}\n\nasync function changeIconColor(name: string, context: vscode.ExtensionContext): Promise<boolean> {\n    const configurationPoint = `simple.${name}.color`;\n    let color = vscode.workspace.getConfiguration('simpleIcons').get<string>(configurationPoint, null);\n    const oldColor = context.globalState.get<string>(configurationPoint);\n\n    if (!color) {\n        if (oldColor) {\n            color = oldColor;\n            await context.globalState.update(configurationPoint, undefined);\n        } else {\n            return false;\n        }\n    } else if (!color.match(colorRegex)) {\n        await vscode.window.showWarningMessage(`Icon color for '${name}' not in hex format, color not changed`);\n        return false;\n    }\n\n    const names = name == 'folder' ? [name, name + '.expanded'] : [name];\n    const filePaths = names.map(p => path.join('icons', 'simple-icons', p) + '.svg');\n    let somethingChanged = false;\n\n    for (const filePath of filePaths) {\n        await changeFile(context, filePath, async content => {\n            const contentMatches = content.match(colorRegex);\n            const originalColor = contentMatches[0];\n\n            if (originalColor === color) {\n                return null;\n            }\n\n            somethingChanged = true;\n\n            if (color !== oldColor) {\n                await context.globalState.update(configurationPoint, originalColor);\n            }\n\n            return content.replace(colorRegex, color);\n        });\n    }\n\n    return somethingChanged;\n}\n\nasync function changeFile(context: vscode.ExtensionContext, name: string, dg: (content: string) => Promise<string>): Promise<void> {\n    const file = context.asAbsolutePath(name);\n    const content = await new Promise<string>(resolve => fs.readFile(file, (err, data) => resolve(data.toString())));\n    const newContent = await dg(content);\n\n    if (newContent) {\n        return await new Promise<void>(resolve => fs.writeFile(file, newContent, err => resolve()));\n    }\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(959);\n"],"names":["colorRegex","probeConfiguration","context","toggleArrows","changeIconColor","indexOf","vscode","window","showInformationMessage","then","choice","commands","executeCommand","jsonFiles","map","name","somethingChanged","file","changeFile","content","json","JSON","parse","conf","workspace","getConfiguration","get","hidesExplorerArrows","stringify","configurationPoint","color","oldColor","globalState","match","showWarningMessage","update","undefined","filePaths","p","path","join","filePath","originalColor","replace","dg","asAbsolutePath","Promise","resolve","fs","readFile","err","data","toString","newContent","writeFile","subscriptions","push","onDidChangeConfiguration","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}